from required_classes.machines_ import Machine
from typing import List
import numpy as np
import cv2
import config
import utils

DELAY_COLOR = (50,50,50)
OPERATION_COLOR = (10,255,20)


class Operation:
    def __init__(self, operationID, machineReq:Machine):
        self.id = operationID
        self.machineReq = machineReq
        self.cycleTimeHrs = 0
        self.minDelayHrs = 0
        self.maxDelayHrs = 0
        self.timeOperation = 'hrs'
        self.totalMaxHrs = 0
        self.totalMinHrs = 0

        self.npArray = None
        self.grayImg = None
        self.delay_detail_list = []

        ###############  Human Readable Date time ################
        self.operationStart_date = None
        self.operationStart_time = None
        self.operationEnd_date = None
        self.operationEnd_time = None
        ###############  Freezed start end day time index ################
        self.operation_st_day_index = None
        self.operation_st_hr_index = None
        self.operation_end_day_index = None
        self.operation_end_hr_index = None

        ###############  Temporary start end day time index ################
        self.temp_assigned_st_day_index = None
        self.temp_assigned_st_hr_index = None
        self.temp_assigned_end_day_index = None
        self.temp_assigned_end_hr_index = None
        
        self.isValidationFailed = False
        self.day_st_end_assigned_list = []
        
    def setCycleTime(self, cycleTimeInHrs):
        self.cycleTimeHrs = cycleTimeInHrs

    def setMinMaxDelays(self, minDelayHrs, maxDelayHrs):
        if minDelayHrs != "-":
            self.minDelayHrs = minDelayHrs
        if maxDelayHrs !="-":
            self.maxDelayHrs = maxDelayHrs
        
        self.totalMaxHrs = self.cycleTimeHrs + self.maxDelayHrs
        self.totalMinHrs = self.cycleTimeHrs + self.minDelayHrs

    def create_image(self):
        singleCh = np.zeros((1,self.totalMaxHrs),dtype=np.float32)
        self.npArray = cv2.merge((singleCh,singleCh,singleCh))
        self.npArray = self.npArray.astype(np.uint8)
        self.npArray[:, :self.cycleTimeHrs] = OPERATION_COLOR
        self.npArray[:, self.cycleTimeHrs:] = DELAY_COLOR


        return self.npArray
    
    def get_working_delay_img_list(self):
        """function return imageslist with min to max each hour image"""
        imageListWithMinMaxDelay = []
        mask_working_delay_images_list = []

        for delayHr in range(self.minDelayHrs, self.maxDelayHrs+1):
                
            grayImg = np.zeros((1, self.cycleTimeHrs + delayHr), dtype='uint8')
            mask_operation_working = np.zeros_like(grayImg)
            mask_operation_delay = np.zeros_like(grayImg)

            grayImg[:, :self.cycleTimeHrs] = config.OPERATION_COLOR
            mask_operation_working[:, :self.cycleTimeHrs] = 255

            grayImg[:, self.cycleTimeHrs:] = config.DELAY_COLOR
            mask_operation_delay[:, self.cycleTimeHrs:] = 255
            imageListWithMinMaxDelay.append(grayImg)
            mask_working_delay_images_list.append([mask_operation_working, mask_operation_delay])
        

        return imageListWithMinMaxDelay, mask_working_delay_images_list

    def print_operation_schedule(self):
        print(f"""Operation ID {self.id} : Machine {self.machineReq.name} START {self.operationStart_date} 
        - {self.operationStart_time} hrs, END {self.operationEnd_date} - {self.operationEnd_time} hrs
        """)
    
    def print_operation_temporary_assigned_details(self):
        print(f"""Operation ID {self.id} : Machine {self.machineReq.name} START {self.temp_assigned_end_day_index} 
        - {self.operationStart_time} hrs, END {self.operationEnd_date} - {self.operationEnd_time} hrs
        """)

    def try_assigning_op_cycle(self, dayStartIndex, trialStHr, isFirstOrder):
        """USE THIS FOR FIRST OPERATION ONLY ...."""
        """will assing temporary start day and hr and 
        return endCycleDay, endCycleHr for DelayAssignment"""
        # validate_if dayStartIndex
        if isFirstOrder:
            CycleAssignerValidator.validator_list= []
            CycleAssignerValidator.list_mask_assigned = []

        if dayStartIndex is None:

            print("got dayStartIndex as None ???")
            return None, None
            

        endCycleDayIndex, endCycleHrIndex = None,None
        self.temp_assigned_st_day_index = dayStartIndex
        self.temp_assigned_st_hr_index = trialStHr
        
        cycleAssigner = CycleAssignerValidator(self.cycleTimeHrs, trialStDayIndex=dayStartIndex, trialStHr=trialStHr, machineName=self.machineReq.name,
          operation_max_delay_hrs = self.maxDelayHrs)
        print("trying to set operation -->")
        # self.print_operation_schedule()
        isAssigned = cycleAssigner.try_assigning_first_operation(isFirstOrder=isFirstOrder)
        if isAssigned==True:
            self.temp_assigned_st_day_index = cycleAssigner.list_day_wise_assigned_details[0][0]
            self.temp_assigned_st_hr_index = cycleAssigner.list_day_wise_assigned_details[0][1]


        if cycleAssigner.assigned_with_validation==True:
            endCycleDayIndex = cycleAssigner.list_day_wise_assigned_details[-1][0] 
            endCycleHrIndex = cycleAssigner.list_day_wise_assigned_details[-1][2]
            self.day_st_end_assigned_list.extend(cycleAssigner.list_day_wise_assigned_details)
             

        return endCycleDayIndex, endCycleHrIndex

    def try_assigning_op_delay(self, endCycleDayIndex, endCycleHrIndex):
        """will assing temporary end day and hr if, i) validates rule of assignment else return None None 
        return endCycleDay, endCycleHr for DelayAssignment"""

        self.delay_detail_list = []
        stDelayDayIndex = endCycleDayIndex
        stDelayHrIndex = endCycleHrIndex
        ## get current day _end_cycle_hr

        endDelayDayIndex = None
        endDelayHrIndex = None

        ## get next day_possible_start_working_hr
        ## calculate hrs between them
        ## if hrs between them is within min max range and 
        ## min hr is on color ---> OK
        ## max hr is on gray --- NOT OK          
        ### check if stmin delay

        min_delay_possible = stDelayHrIndex + self.minDelayHrs
        daySchObj_curr = utils.get_day_machine_sch_img(dayIndex=stDelayDayIndex, machineName=self.machineReq.name)
        mask_delay_overlap_allowable = daySchObj_curr.mask_delay_overlap_allowable
        mask_cycle_op_allowable = daySchObj_curr.mask_operation_overlap_allowable

        mask_delay_overlap_allowable[:,:stDelayHrIndex] = 0
        hrs_assignable_delay = np.sum(mask_delay_overlap_allowable==255)

        assigned_delay_hrs = 0
        #### get end_day_index for min_delay
        endDayIndexMinDelay = stDelayDayIndex
        endHrIndexMinDelay = min_delay_possible

        # if min_delay_possible < hrs_assignable_delay:
        if self.minDelayHrs < hrs_assignable_delay:
            ## can be assigned on the same day
            endDayIndexMinDelay = stDelayDayIndex  ## same day
            assigned_delay_hrs = self.minDelayHrs
            self.delay_detail_list.append([stDelayDayIndex, stDelayHrIndex, min_delay_possible, 1])


        else:
            ### loop through and find end_min_delay_day_index
            current_day_index = stDelayDayIndex
            assigned_delay_hrs = hrs_assignable_delay
            self.delay_detail_list.append([current_day_index, stDelayHrIndex, assigned_delay_hrs , 1])
            remaining_delay_hrs = self.minDelayHrs - assigned_delay_hrs
            nextDaySchObj = utils.get_day_machine_sch_img(dayIndex=current_day_index+1, machineName=self.machineReq.name)
            mask_next_day_delay_overlap_allowable = nextDaySchObj.mask_delay_overlap_allowable
            hrs_assignable_delay_next_day = np.sum(mask_next_day_delay_overlap_allowable==255)
            n_whites, st_end_list = utils.check_if_it_has_more_than_1_white_blocks(mask_next_day_delay_overlap_allowable)


            while True:
                if remaining_delay_hrs < hrs_assignable_delay_next_day:
                    endDayIndexMinDelay = current_day_index+1
                    endHrIndexMinDelay = remaining_delay_hrs
                    if len(st_end_list)>0:
                        st_hr_index = st_end_list[0][0]
                        self.delay_detail_list.append([current_day_index, st_hr_index, st_hr_index+remaining_delay_hrs, 1])
                    break

                else:
                    current_day_index+=1
                    remaining_delay_hrs -= hrs_assignable_delay_next_day
                    nextDaySchObj = utils.get_day_machine_sch_img(dayIndex=current_day_index+1, machineName=self.machineReq.name)
                    mask_next_day_delay_overlap_allowable = nextDaySchObj.mask_delay_overlap_allowable
                    hrs_assignable_delay_next_day = np.sum(mask_next_day_delay_overlap_allowable==255)
                    n_whites, st_end_list = utils.check_if_it_has_more_than_1_white_blocks(mask_next_day_delay_overlap_allowable)
                    if len(st_end_list)>0:
                        st_hr_index = st_end_list[0][0]
                        
                        self.delay_detail_list.append([current_day_index, st_hr_index, st_hr_index+hrs_assignable_delay_next_day, 1])

                
        ####### Min delay is assigned 
        ###### Check if min delay work means, nextOpStart is on color
        ### CHeck only in case of min delay is > 0
        if self.minDelayHrs>0:
            nextOpStartHr = endHrIndexMinDelay  ## check if +1
            color_next_opStart = mask_cycle_op_allowable[0,nextOpStartHr]
            print("Next Operation start color ", color_next_opStart)
            if color_next_opStart==255:
                ## OK Assignable
                endDelayDayIndex= endDayIndexMinDelay
                endDelayHrIndex = min_delay_possible
                self.isValidationFailed = False
                return endDelayDayIndex, endDelayHrIndex
            else:
                ## if diff in max and min delay i.e. can be stretched..
                diff_delay_hrs = self.maxDelayHrs - self.minDelayHrs 
                if diff_delay_hrs > 0:
                    ### get next_working_hour
                    lastDayMinDelayObj =  utils.get_day_machine_sch_img(dayIndex=endDayIndexMinDelay, machineName=self.machineReq.name)
                    lastDayMinDelayObj_working_mask = lastDayMinDelayObj.mask_operation_overlap_allowable  
                    lastDayMinDelayObj_working_mask[:, :endHrIndexMinDelay] = 0  #check this line commented

                    hrs_stretch_possible = 0
                    countWhites, st_end_list = utils.check_if_it_has_more_than_1_white_blocks(lastDayMinDelayObj_working_mask)
                    if countWhites==1:
                        ### same day next working hr available for stretching
                        nextWorkingStIndex = st_end_list[0][0]
                        # hrs_stretch_possible = nextWorkingStIndex - endDelayHrIndex
                        hrs_stretch_possible = nextWorkingStIndex
                        endDelayDayIndex = endDayIndexMinDelay
                        endDelayHrIndex = nextWorkingStIndex
                        

                    elif countWhites==0:
                        ### next day next working hr available for stretching
                        next_daySchObj = utils.get_day_machine_sch_img(dayIndex=endDayIndexMinDelay + 1, machineName=self.machineReq.name)
                        nextDayMinDelayObj_working_mask = next_daySchObj.mask_operation_overlap_allowable  
                        nextDay_delay_assignable_mask = next_daySchObj.mask_delay_overlap_allowable
                        # utils.plot_list_images([nextDayMinDelayObj_working_mask],["nextDayMinDelayObj_working_mask"])
                        countWhites, st_end_list = utils.check_if_it_has_more_than_1_white_blocks(nextDayMinDelayObj_working_mask)
                        if len(st_end_list)>0:
                            nextWorkingStIndex = st_end_list[0][0]
                        else:
                            ### No next day operation_schedule_available
                            nextWorkingStIndex = nextDay_delay_assignable_mask.shape[1]-1
                        
                        prev_day_stretch_possible = lastDayMinDelayObj_working_mask.shape[1] - endHrIndexMinDelay - 1
                        self.delay_detail_list.append([endDayIndexMinDelay, endHrIndexMinDelay, endHrIndexMinDelay+prev_day_stretch_possible+1, 1])
                        curr_day_stretch_possible = nextWorkingStIndex + 1
                        hrs_stretch_possible = prev_day_stretch_possible + curr_day_stretch_possible
                        endDelayDayIndex = endDayIndexMinDelay + 1
                        endDelayHrIndex = nextWorkingStIndex
                        self.delay_detail_list.append([endDelayDayIndex, 0, endDelayHrIndex, 1])

                    if hrs_stretch_possible <=diff_delay_hrs:
                        ## possible
                        # add_difference_stretch
                       
                        self.isValidationFailed = False
                        return endDelayDayIndex, endDelayHrIndex
                    else:
                        self.isValidationFailed = True
                        return None, None




                else:
                    ## Not assignable
                    self.isValidationFailed = True
                    return None, None
        else:
            endDelayDayIndex= endDayIndexMinDelay
            endDelayHrIndex = min_delay_possible
            self.isValidationFailed = False
            return endDelayDayIndex, endDelayHrIndex

    def set_operation_temp_st_end(self, st_dayIndex, stHrIndex, end_dayIndex, endHrIndex):

        self.temp_assigned_st_day_index = st_dayIndex
        self.temp_assigned_st_hr_index = stHrIndex
        self.temp_assigned_end_day_index = end_dayIndex
        self.temp_assigned_end_hr_index = endHrIndex

    def freeze_operation_st_end_times(self, days_list):
        if self.temp_assigned_end_day_index is not None:
            self.operation_st_day_index = self.temp_assigned_st_day_index
            self.operationStart_date = days_list[self.operation_st_day_index]

            self.operation_st_hr_index = self.temp_assigned_st_hr_index
            self.operationStart_time = self.operation_st_hr_index 
            self.operation_end_day_index = self.temp_assigned_end_day_index
            self.operationEnd_date = days_list[self.operation_end_day_index]
            self.operation_end_hr_index = self.temp_assigned_end_hr_index
            self.operationEnd_time = self.operation_end_hr_index




class CycleAssignerValidator:

    validator_list = []
    list_mask_assigned = []
    
    def __init__(self, cycleTimeHrs, trialStDayIndex, trialStHr, machineName, operation_max_delay_hrs):
        self.cycleTimeHrs = cycleTimeHrs
        self.trialStDayIndex = trialStDayIndex
        self.trialStHr = trialStHr
        self.remaining_cycle_hrs_to_assign = self.cycleTimeHrs
        self.machineName = machineName

        self.list_crops_assigned = []
        self.list_day_wise_assigned_details = [] ## This include list of [st_day_index, st_hr_index, size_of_crop]
        self.list_mask_assigned_hrs = []

        self.increment = 1
        
        self.assigned_with_validation = False
        self.operation_max_delay_hrs = operation_max_delay_hrs

    def try_assigning_first_operation(self, isFirstOrder=False):
        """For First operation only"""
        current_day_st_index = self.trialStDayIndex
        current_hr_st_index = self.trialStHr
        firstInstance = True
        while self.remaining_cycle_hrs_to_assign >0:
            mask_cycle = np.ones((1, self.remaining_cycle_hrs_to_assign), dtype='uint8')

            daySchObj = utils.get_day_machine_sch_img(dayIndex=current_day_st_index, machineName=self.machineName)

            dayGrayImg, mask_allowable_work = daySchObj.gray_day_slot_img, daySchObj.mask_operation_overlap_allowable
            if mask_allowable_work is not None and firstInstance==True:
                mask_allowable_work[:, :current_hr_st_index] = 0
            #     firstInstance = False
            
            mask_assigned_hrs = daySchObj.mask_assigned_hrs

            ## check_if mask_allowable_work has two working_slots
            count_white_blocks, st_end_white_blk_list = utils.check_if_it_has_more_than_1_white_blocks(mask_allowable_work)
            if count_white_blocks==1:
                ## blackout the time before start_hr
                st_possible_assing_hr = st_end_white_blk_list[0][0]
                current_hr_st_index = st_possible_assing_hr
                mask_allowable_work[:, :current_hr_st_index] = 0
                ## calculate remaining time for assignment
                hrs_allowable_for_assign = np.sum(mask_allowable_work==255)
                if firstInstance==True:
                    ## can be assigned
                    ## if 
                    if mask_allowable_work[:,current_hr_st_index]==255:
                        ## can be assigned
                        firstInstance=False
                    else:
                        return False

                print("Hrs available for assigning work", hrs_allowable_for_assign)
                if hrs_allowable_for_assign <= self.remaining_cycle_hrs_to_assign:
                    ## cropping needed
                    crop_curr_day = mask_cycle[:,:hrs_allowable_for_assign]
                    self.list_crops_assigned.append(crop_curr_day)
                    self.list_day_wise_assigned_details.append([current_day_st_index, current_hr_st_index, current_hr_st_index+hrs_allowable_for_assign, 0])
                    self.list_mask_assigned_hrs.append(mask_assigned_hrs)

                    
                    remaining_hrs = self.remaining_cycle_hrs_to_assign - hrs_allowable_for_assign
                    crop_next_day = mask_cycle[:, hrs_allowable_for_assign:]
                    assigned_crop_img = np.zeros_like(mask_allowable_work)
                    assigned_crop_img[:,current_hr_st_index:current_hr_st_index+hrs_allowable_for_assign] = 255
                    # utils.plot_3_images(assigned_crop_img, mask_assigned_hrs, crop_next_day)
                    # utils.plot_list_images([assigned_crop_img, mask_assigned_hrs, crop_next_day],["assigned_crop_img", "mask_assigned_hrs", "crop_next_day"] )
                    self.remaining_cycle_hrs_to_assign = remaining_hrs
                    current_day_st_index+=1
                
                else:
                    # st, end =current_hr_st_index, current_hr_st_index+ self.remaining_cycle_hrs_to_assign
                    crop_curr_day = mask_cycle[:,:self.remaining_cycle_hrs_to_assign]
                    self.list_crops_assigned.append(mask_cycle)
                    self.list_day_wise_assigned_details.append([current_day_st_index, current_hr_st_index, current_hr_st_index+self.remaining_cycle_hrs_to_assign, 0])
                    self.list_mask_assigned_hrs.append(mask_assigned_hrs)
                    assigned_crop_img = np.zeros_like(mask_allowable_work)
                    assigned_crop_img[:,current_hr_st_index:current_hr_st_index+self.remaining_cycle_hrs_to_assign] = 255

                    self.remaining_cycle_hrs_to_assign = 0                    
                    # utils.plot_3_images(crop_curr_day, mask_assigned_hrs, dayGrayImg)
                    # utils.plot_list_images([assigned_crop_img, mask_assigned_hrs, dayGrayImg],["assigned_crop_img", "mask_assigned_hrs", "dayGrayImg"] )

            else:
                if firstInstance==True and isFirstOrder==False:
                    return False

                else:
                    current_day_st_index+=1
                
                # if isFirstOrder==True:
                #     current_day_st_index+=1

                # if isFirstOrder==False and daySchObj.dayStHr is None:
                #     current_day_st_index+=1
                # elif isFirstOrder==False and daySchObj.dayStHr:
                #     return False

                # if isFirstOrder==False and len(self.list_crops_assigned)==0:
                #     ## dont allow for first instance of next operation
                

        CycleAssignerValidator.validator_list.extend(self.list_day_wise_assigned_details)
        CycleAssignerValidator.list_mask_assigned.extend(self.list_mask_assigned_hrs)

        validation_result = self.validate_cycle_assignment_rules()
        if validation_result==True:
            self.assigned_with_validation = True
            return True
        else:
            ### Cannot be assigned
            ## Retry assigning with + 1 hour
            if isFirstOrder==True:
                self.trialStHr+= self.increment
                self.try_assigning()
            else:
                return False


    def validate_cycle_assignment_rules(self):
        """
        Two rules to validate : 
        1. cycle should not overlap gray if it does, crop cycle for next day assignment
        2. withing two crop regions there should not be any assigned day (other order assignment)
        """
        # check_if_all_days_are_consecutive
        
        
        result_order_assigned_in_between = self.check_if_other_order_assigned_in_between()
        if result_order_assigned_in_between ==True:
            ### Cannot be assigned
            ## Retry assigning with + 1 hour
            
            return False
        
        result_validation_2 = self.check_if_cycle_time_ends_in_gray_with_delay()
        if result_validation_2==False:
            return False 
        
        return True


    def check_if_other_order_assigned_in_between(self):
        """"""
        
        result = False  
        if len(CycleAssignerValidator.validator_list)>0:
            for i in range(len(CycleAssignerValidator.validator_list)):
                if i >0:
                    ## get prev day endhr_cycle to dayEnd
                    dayIndex_prev, stHr_prev, endHr_prev, cycle_or_delay = CycleAssignerValidator.validator_list[i-1]
                    prev_day_assigned_already = CycleAssignerValidator.list_mask_assigned[i-1][:, endHr_prev:]

                    dayIndex_cur, stHr_cur, endHr_cur, cycle_or_delay = CycleAssignerValidator.validator_list[i]
                    curr_day_assigned_already = CycleAssignerValidator.list_mask_assigned[i][:, stHr_cur:] 
                    ## join and check both ``

                    total_mask_assigned_between_ = np.hstack((prev_day_assigned_already, curr_day_assigned_already))
                    count_white_blocks, st_end_list = utils.check_if_it_has_more_than_1_white_blocks(total_mask_assigned_between_)
                    if count_white_blocks==0:
                        ## Means no any other order assigned between 
                        pass
                    else:
                        ## Means there present order between the
                        result=True
                        break

        return result


    def check_if_cycle_time_ends_in_gray_with_delay(self):
        """This is to check the condition - if cycle time for the current operation ends at the day end hr. i.e. end of color,
        next cycle can start after two days also if this operation has say 48 hrs of delay to accomodate the weeekend two days."""

        validation_result = True
        ## 1. Check if cycle time ends at gray

        ## get last day of cycle assignment list
        last_cycle_part_assigned_day_details = CycleAssignerValidator.validator_list[-1]
        day_index, st_hr, end_hr_assigned, type_cycle_or_delay = last_cycle_part_assigned_day_details

        ## get_delay_assignable_mask

        daySchObj = utils.get_day_machine_sch_img(dayIndex=day_index, machineName=self.machineName)
        dayGrayImg, mask_allowable_work = daySchObj.gray_day_slot_img, daySchObj.mask_operation_overlap_allowable

        # mask_work_day_sche = CycleAssignerValidator.list_mask_assigned[-1]
        # mask_not_allowable_work = cv2.bitwise_not(mask_allowable_work)
        if mask_allowable_work[0, end_hr_assigned + 1]==0:
            ## Mean cycle is ending at day end...
            
            delay_hrs_to_stretch = 0
            next_working_hr_found = False
            
            allowable_st_hr_check = mask_allowable_work[0, end_hr_assigned:]
            n_white_block, start_end_list = utils.check_if_it_has_more_than_1_white_blocks(allowable_st_hr_check)
            if n_white_block ==0:
                ## Current day has no assignable start hr.
                delay_hrs_to_stretch += np.sum(mask_allowable_work==0)
            else:
                delay_hrs_to_stretch += start_end_list[0][0]
                next_working_hr_found=True

            ## Check next working hr
            current_working_day = day_index + 1
            while next_working_hr_found==False:
                daySchObj = utils.get_day_machine_sch_img(dayIndex=day_index, machineName=self.machineName)
                dayGrayImg, mask_allowable_work = daySchObj.gray_day_slot_img, daySchObj.mask_operation_overlap_allowable


                n_white_block, start_end_list = utils.check_if_it_has_more_than_1_white_blocks(mask_allowable_work)
                if n_white_block ==0:
                    ## Current day has no assignable start hr.
                    delay_hrs_to_stretch += np.sum(mask_allowable_work==0)
                else:
                    delay_hrs_to_stretch += start_end_list[0][0]
                    next_working_hr_found=True  

                current_working_day+=1


            if delay_hrs_to_stretch <= self.operation_max_delay_hrs:
                validation_result = True
            else:
                validation_result = False


        else:
            # cycle is not ending at day end

            validation_result = True

        return validation_result













        






class Order_or_job:
    orderList = []
    def __init__(self, id) -> None:
        self.id = id
        self.operationSeq = []

        self.assigned_st_dayTime = None     ## DateTimeObject
        self.assigned_end_dayTime = None    ## DateTimeObject

        self.isScheduleAssigned = False
        self.grayStartList = []
        self.grayEndList = []

        self.cumulativeOpEnd = 0

        self.totalMinTime = 0
        self.totalMaxTime = 0

        self.orderImg = None
        self.orderImageListSeq = []
        self.isInfeasibleForProduction = False


    def setOperationSequences(self, operationSeqList:List[Operation]):
        self.operationSeq = operationSeqList

        self.check_operations_infeasibility_by_delay_hrs()

    def create_and_add_operation(self, df_line, machineObjList):

        """ """
        opId = self.id
        df_line = df_line.replace("-",0)
        step, machineRequired, prevOp, cycleTimeHrs, minDelay, maxDelay = df_line
        
        machineObjOperation = self.__getMachineObj(machineRequired)
        # operationId, cycleTimeHrs, minDelay, maxDelay = [f"{opId}_{step}", 4, 2, 10]
        operationId = f"{opId}_{step}"
        operation1 = Operation(operationID=operationId, machineReq=machineObjOperation)
        operation1.setCycleTime(cycleTimeHrs)
        if maxDelay != "-" and maxDelay!=0:
            graySt = self.cumulativeOpEnd + cycleTimeHrs
            grayEnd  = self.cumulativeOpEnd + cycleTimeHrs + maxDelay
            
            self.grayStartList.append(graySt)
            self.grayEndList.append(grayEnd)

            self.cumulativeOpEnd += grayEnd
        
        else:
            self.cumulativeOpEnd += cycleTimeHrs

        operation1.setMinMaxDelays(minDelay, maxDelay)
        self.totalMinTime += operation1.totalMinHrs
        self.totalMaxTime += operation1.totalMaxHrs

        self.operationSeq.append(operation1)
    
    def __getMachineObj(self, machineName):
        if machineName in Machine.dict_machine_name.keys():
            return Machine.dict_machine_name[machineName]
        else:
            return None
    
    def getOrderOperationImageList(self):
        
        
        
        for i, operation in enumerate(self.operationSeq):
            imgOp = operation.create_image()
            self.orderImageListSeq.append(imgOp)
        
       
        widowName = f"Operation {self.id}"
        
        return self.orderImageListSeq

    def getTotalOrderImage(self):
        if len(self.orderImageListSeq)==0:
            self.getOrderOperationImageList()
        
        imageHt = len(self.operationSeq)
        imageWd = self.totalMaxTime
        self.orderImg = np.zeros((imageHt, imageWd, 3))
        
        st = 0
        for i, img in enumerate(self.orderImageListSeq):
            operationImgWidth = img.shape[1]
            end = st + operationImgWidth
            self.orderImg[i, st:end] = img

            st = end

        return self.orderImg 

    def __str__(self):
        return f"Order name {self.id} assignedstDay {self.assigned_st_dayTime}"
        
    def save_order(self):
        self.orderList.append(self)


    def assign_order(self, assigned_values_list):
        """assign all operations the start and end time
        param list of list of assigning values ex [[stDate, stHr, endDate, endHr], [stDate, stHr, endDate, endHr]]"""
        
        for i, operation in enumerate(self.operationSeq):
            # start_day_operation = start_day_first_operation
            stDate, stHr, endDate, endHr = assigned_values_list[i]
            operation.operationStart_date =stDate
            operation.operationStart_time = stHr
            operation.operationEnd_date = endDate
            operation.operationEnd_time = endHr
        
        self.isScheduleAssigned = True
        self.isInfeasibleForProduction=False
    
    def print_order_assigned_status(self):
        if self.isInfeasibleForProduction:
            print(f"Order {self.id} is infeasible for scheduling for production")
        else:
            if self.isScheduleAssigned:
                print(f"Order {self.id} is scheduled for production as below : ")
                for operation in self.operationSeq:
                    operation.print_operation_schedule()
                

    def check_operations_infeasibility_by_delay_hrs(self):
        for operation in self.operationSeq:
            if operation.minDelayHrs > 8:
                self.isInfeasibleForProduction=True
                break
    
    
    def plot_order_image(self):
        pass

    def freeze_order(self):
        for operation in self.operationSeq:
            op_st_day_index, op_end_day_index = operation.temp_assigned_st_day_index, operation.temp_assigned_end_day_index
            op_st_hr_index, op_end_hr_index = operation.temp_assigned_st_hr_index, operation.temp_assigned_end_hr_index

            # for i, day in range(op_st_day_index, op_end_day_index):
            #     if 

            pass


            
